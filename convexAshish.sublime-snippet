<snippet>
	<content><![CDATA[
struct point{
    int x, y;
    point() {}
    point(int x, int y) : x(x), y(y) {}
    void assign(point  p){
        x=p.x, y=p.y;
    }
    bool operator <(point  p){
        if(x==p.x)
            return y<p.y;
        return x<p.x;
    }
    bool operator >(point  p){
        if(x==p.x)
            return y>p.y;
        return x>p.x;
    }
    point operator +(point  p)  {
        point pt(x + p.x, y + p.y);
        return pt;
    }
    point operator -(point  p)  {
        point pt(x - p.x, y - p.y);
        return pt;
    }
    int crossProduct(point  p)  {   
        return x * p.y - y * p.x;
    }   
    int dotProduct(point  p)  {
        return x * p.x + y * p.y;
    }
};

bool cw(point  a, point  b, point  c)
{
    int area=a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y);
    return area<0;
}

bool ccw(point  a, point  b, point  c)
{
    int area=a.x*(b.y-c.y) + b.x*(c.y-a.y) + c.x*(a.y-b.y);
    return area>0;
}

vector<point> convex_hull(vector<point>  v)
{
    if(v.size()==1)
        return v;
    sort(v.begin(), v.end());
    point p1=v[0], p2=v.back();
    vector<point> up, down;
    up.push_back(p1);
    down.push_back(p1);
    for(int i=1;i<v.size();i++)
    {
        if(i==v.size()-1 || cw(p1, v[i], p2)){
            while(up.size()>=2 && !cw(up[up.size()-2], up.back(), v[i]))
                up.pop_back();
            up.push_back(v[i]);
        }
        if(i==v.size()-1 || ccw(p1, v[i], p2))
        {
            while(down.size()>=2 && !ccw(down[down.size()-2], down.back(), v[i]))
                down.pop_back();
            down.push_back(v[i]);
        }
    }

    for(int i=down.size()-2;i>0;i--)
        up.push_back(down[i]);

    return up;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>ConvexHull</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
