<snippet>
	<content><![CDATA[
// vector<int> v;
// struct info{
//     int x,lazy;
//     info(){
//         x=0;lazy=0;
//     }
// };
// struct SegTree{
//     int N;
//     vector<info> st;
//     void init(int n){
//         N=n;
//         st.resize(4*N+5);
//     }
//     void merge(info &cur,info &l,info &r){
//         cur.x=l.x+r.x;
//     }
//     void Build(int node,int L,int R){
//         if(L==R){
//             st[node].x=v[L-1];
//             return;
//         }
//         int MM=(L+R)/2;
//         Build(node*2,L,MM);
//         Build(node*2+1,MM+1,R);
//         merge(st[node],st[node*2],st[node*2+1]);
//     }
//     info Query(int node,int L,int R,int i,int j){
//         if(j<L||i>R)return info();
//         st[node].x+=st[node].lazy*(R-L+1);
//         if(L!=R)
//         {st[node*2].lazy+=st[node].lazy;st[node*2+1].lazy+=st[node].lazy;}
//         st[node].lazy=0;
//         if(i<=L&&R<=j)return st[node];
//         int MM=(L+R)/2;
//         info left=Query(node*2,L,MM,i,j);
//         info right=Query(node*2+1,MM+1,R,i,j);
//         info cur;
//         merge(cur,left,right);
//         return cur;
//     }
//     void Update(int node,int L,int R,int lpos,int rpos,int val){
//         if(L>rpos||R<lpos)return;
//         st[node].x+=st[node].lazy*(R-L+1);
//         if(L!=R)
//         {st[node*2].lazy+=st[node].lazy;st[node*2+1].lazy+=st[node].lazy;}
//         st[node].lazy=0;
//         if(L==lpos&&rpos==R){
//             st[node].x+=val*(R-L+1);
//             if(L!=R){
//                 st[node*2].lazy+=val;st[node*2+1].lazy+=val;
//             }
//             return;
//         }
//         int MM=(L+R)/2;
//         if(MM>=lpos&&MM<=rpos){
//             Update(node*2,L,MM,lpos,MM,val);
//             Update(node*2+1,MM+1,R,MM+1,rpos,val);
//         }
//         else{
//             Update(node*2,L,MM,lpos,rpos,val);
//             Update(node*2+1,MM+1,R,lpos,rpos,val);
//         }
//         merge(st[node],st[node*2],st[node*2+1]);
//     }
//     info query(int l,int r){return Query(1,1,N,l,r);}
//     void update(int lpos,int rpos,int val){Update(1,1,N,lpos,rpos,val);}
//     void build(){Build(1,1,N);}
// };

vector<int> v;
struct info{
    int x,lazy,ls;
    info(){ x=0; ls=0; }
};
struct SegTree{
    int N;
    vector<info> st;
    void init(int n){ N=n; st.resize(4*N+5); }

    //change this merge
    void merge(info &cur,info &l,info &r){
        cur.x=l.x+r.x;
    }

    void Build(int node,int L,int R){
        if(L==R){
            // change for default values
            st[node].x=v[L-1];
            return;
        }
        int MM=(L+R)/2;
        Build(node*2,L,MM);
        Build(node*2+1,MM+1,R);
        merge(st[node],st[node*2],st[node*2+1]);
    }

    // change on type of update replace or add
    void Lazy(int node,int L,int R){
        st[node].x += st[node].lazy*(R-L+1);
        if(L!=R){
            if(st[node*2].ls)
                st[node*2].lazy += st[node].lazy;
            else
                st[node*2].lazy = st[node].lazy,
                st[node*2].ls = 1;
            if(st[node*2+1].ls)
                st[node*2+1].lazy += st[node].lazy;
            else
                st[node*2+1].lazy = st[node].lazy,
                st[node*2+1].ls = 1;
        }
        st[node].lazy = 0;
        st[node].ls = 0;
    }

    info Query(int node,int L,int R,int i,int j){
        if(st[node].ls)
            Lazy(node,L,R);
        if(j<L||i>R)return info();
        if(i<=L&&R<=j)return st[node];
        int MM=(L+R)/2;
        info left=Query(node*2,L,MM,i,j);
        info right=Query(node*2+1,MM+1,R,i,j);
        info cur;
        merge(cur,left,right);
        return cur;
    }

    void Update(int node,int L,int R,int lpos,int rpos,int val){
        if(st[node].ls)
            Lazy(node,L,R);
        if(L>rpos||R<lpos)return;
        if(L==lpos&&rpos==R){
            st[node].x += val*(R-L+1);
            if(L!=R){
                if(st[node*2].ls)
                    st[node*2].lazy += val;
                else
                    st[node*2].lazy = val,
                    st[node*2].ls = 1;
                if(st[node*2+1].ls)
                    st[node*2+1].lazy += val;
                else
                    st[node*2+1].lazy = val,
                    st[node*2+1].ls = 1;
            }
            return;
        }
        int MM=(L+R)/2;
        if(MM>=lpos&&MM<=rpos){
            Update(node*2,L,MM,lpos,MM,val);
            Update(node*2+1,MM+1,R,MM+1,rpos,val);
        }
        else{
            Update(node*2,L,MM,lpos,rpos,val);
            Update(node*2+1,MM+1,R,lpos,rpos,val);
        }
        merge(st[node],st[node*2],st[node*2+1]);
    }

    info query(int l,int r){return Query(1,1,N,l,r);}
    void update(int lpos,int rpos,int val){Update(1,1,N,lpos,rpos,val);}
    void build(){Build(1,1,N);}
};


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>SegmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
